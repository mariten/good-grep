#!/bin/bash
# Configuration
LINES_IN_SINGLE_WINDOW=50

# Perform Pretty Grep search
SEARCH_TERM=$1
PARAMS=$2

# Auto-init excludes file if necessary
# Also see, https://github.com/mariten/good-grep/blob/master/sample/.gg_excludes
GG_EXCLUDES="$HOME/.gg_excludes"
if [ ! -f $GG_EXCLUDES ]; then
    echo '# Revision Control'            > $GG_EXCLUDES
    echo '.git/'                        >> $GG_EXCLUDES
    echo '.svn/'                        >> $GG_EXCLUDES
    echo                                >> $GG_EXCLUDES
    echo '# Temp Files'                 >> $GG_EXCLUDES
    echo '*.bak'                        >> $GG_EXCLUDES
    echo '*.swp'                        >> $GG_EXCLUDES
    echo '*.tmp'                        >> $GG_EXCLUDES
fi

# Iterate through excludes file and build "--exclude" argument
EXCLUDES_LIST=""
while read EXCLUDE_ITEM; do
    if [ "$EXCLUDE_ITEM" == "" ]; then
        # Exclude empty lines
        continue
    elif [ "${EXCLUDE_ITEM:0:1}" == "#" ]; then
        # Exclude comments (starting with pound sign)
        continue
    elif [ "${EXCLUDE_ITEM: -1}" == "/" ]; then
        # Add to list of excluded directories, without trailing slash
        EXCLUDES_LIST="$EXCLUDES_LIST --exclude-dir=${EXCLUDE_ITEM:0:${#EXCLUDE_ITEM} - 1}"
    else
        # Add to list of excluded files
        EXCLUDES_LIST="$EXCLUDES_LIST --exclude=$EXCLUDE_ITEM"
    fi
done < $GG_EXCLUDES

# Perform grep command and trim leading whitespace of results using sed
GREP_RESULTS=`                                                              \
    egrep                                                                   \
    --color=always                                                          \
    $EXCLUDES_LIST                                                          \
    -nr"$2"                                                                 \
    "$1"                                                                    \
    *                                                                       \
    2>/dev/null                                                             \
    |                                                                       \
    sed -e 's/\[K:\[m\[K[ \t][ \t]*/[K:[m[K/'`
    # The above "sed" command removes whitespace preceeding the matched lines from grep
    # With this, indented lines of code will take up less space on the screen
    # The regex contains *nix-style escape characters (used in color codes) which don't show up in GitHub's viewer

# Check number of lines
GREP_LINES=`echo "$GREP_RESULTS" | wc -l`

if [ "$LINES_IN_SINGLE_WINDOW" -gt "$GREP_LINES" ]
then
    # Lines do not exceed screen size, output directly to stdout
    echo "$GREP_RESULTS"
else
    # Results require more than one screen, send to pager
    echo "$GREP_RESULTS" | less -RX

fi
